# User and a group to run nginx (www-data is Debian/Ubuntu
# convention). Remove this line if you are not starting nginx as root.
user www-data www-data;

worker_processes 1;
error_log logs/error.log;
pid logs/nginx.pid;

# Supervisord will daemonize nginx.
daemon off;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;

    keepalive_timeout 65;

    server {
        listen 443;
        server_name localhost;

        # It is strongly recommended to use SSL for protected servers,
        # unless you are protecting access to something very
        # non-sensitive.
        ssl on;
        ssl_certificate /usr/local/nginx/conf/server.crt;
        ssl_certificate_key /usr/local/nginx/conf/server.key;

        # Force clients to use secure connections only for at least 8 days
        # after the header was last returned.
        # This setting is strongly recommended for sites served via
        # HTTPS only, but it will break sites that are using plain
        # HTTP for part of a content (not a good practise). Enable
        # with care and first consult:
        # https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
        #
        # add_header Strict-Transport-Security max-age=691200

        root /var/www/localhost/;

        # A directory where wwwhisper is installed. If wwwhisper is
        # installed somwhere else, change the path here and in all
        # 'include /home/wwwhisper/xxx' directives.
        set $wwwhisper_root /home/wwwhisper/;

        # A unix socket to communicate with the wwwhisper instance for
        # this server.
        set $wwwhisper_site_socket unix:$wwwhisper_root/sites/$scheme.$server_name.$server_port/uwsgi.sock;

        # Exposes wwwhisper authorization API and static pages. These
        # need to be available without authorization (so not
        # authenticated users can sign-in).
        include /home/wwwhisper/nginx/auth.conf;

        location / {
            # Enables protection for the root location and all nested
            # locations.
            #
            # IMPORTANT:
            # It is recommended to make all locations nested in the
            # protected location, this ensures no location is
            # accidentally left open. If for some reason such
            # setup is not possible, 'include
            # /home/wwwhisper/nginx/protected_location.conf' needs to
            # be put in each not nested location!
            include /home/wwwhisper/nginx/protected_location.conf;

            # Enable the wwwhisper admin application. It will be
            # accessible via https://localhost/admin
            include /home/wwwhisper/nginx/admin.conf;

            # Site specific configuration follows. Replace it with
            # anything you want to serve.
            location /wiki {
              # This location is nested in an already protected
              # location, it does not need to include
              # protected_location.conf
              include uwsgi_params;
              uwsgi_param SCRIPT_NAME /wiki;
              uwsgi_pass unix:///var/www/moin/moin.sock;
              uwsgi_modifier1 30;
            }
        }


        # proxy PHP scripts to Apache listening on 127.0.0.1:8080
        location ~ \.php$ {
            # This location is not nested in a protected location, so
            # it needs to:
            include /home/wwwhisper/nginx/protected_location.conf;

            # Make sure backends to which authorized requests are
            # passed are not externally accessible, otherwise
            # protection layer could be easily circumvented by direct
            # access to the backend.
            proxy_pass http://127.0.0.1:8080;
        }

        # default 50x error pages rather do not need protection.
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
}