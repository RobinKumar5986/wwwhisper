# Configures wwwhisper.

# ===================================================================
# 1. Enables authorization for all locations on the server. (with the
#    exception of locations annotated with 'auth request off;')
# ===================================================================

auth_request /auth/api/is-authorized/;
auth_request_set $user $upstream_http_user;
add_header User $user;

# If auth-request returns 401 error (user not authenticated) a login
# page along with 401 error status is returned to the user.
error_page 401 /auth/login.html;
# If auth-request returns 403 error (user not authorized) a verbose
# message along with 403 error status is returned.
error_page 403 /auth/not_authorized.html;

# Allows only client to cache protected content.
add_header Cache-Control private;

# Disallows framing of protected web pages by sites from a different origin.
add_header X-Frame-Options SAMEORIGIN;

# Disallows guessing content type of protected resources.
add_header X-Content-Type-Options nosniff;

# Inserts a small iframe at the bottom of each protected html
# document. The iframe contains user's email and 'sign out'
# button. This can be removed, but than users would need to manually
# enter /auth/logout URL to signout.
sub_filter </body>
'
<!-- wwwhisper signout frame -->
<iframe id="wwwhisper-iframe" src="/auth/overlay.html" width="340" height="29"
  frameborder="0" scrolling="no" style="position:fixed; overflow:hidden;
  border:0px; bottom:0px; right:0px; z-index:11235;
  background-color:transparent;">
</iframe>

</body>
';
sub_filter_once on;

# ===================================================================
#  2. Exposes wwwhisper authorization API and static pages.  These
#     need to be available without authorization, so not authenticated
#     users can sign-in.
# ===================================================================

if ($http_user) {
   # Do not allow the client to overwrite authenticated user.
   return 400;
}

# Location to which nginx sends auth-requests.
location /auth/api/is-authorized/ {
    # Internal indicates that the matching location is not accessible
    # to the outside.
    internal;
    uwsgi_pass $wwwhisper_site_socket;
    uwsgi_modifier1 30;
    include uwsgi_params;
    uwsgi_param REQUEST_METHOD GET;
    # request_uri contains a path with a query part (?foo=bar). The
    # query part is not needed, but nginx does not expose not rewritten
    # path without it.
    uwsgi_param QUERY_STRING path=$request_uri;
    uwsgi_param REQUEST_URI $document_uri?path=$request_uri;
    uwsgi_param CONTENT_LENGTH 0;
    uwsgi_pass_request_body off;
}

# Handles Login/Logout/Whoami API calls.
location /auth/api {
    auth_request off;
    uwsgi_pass $wwwhisper_site_socket;
    uwsgi_modifier1 30;
    include uwsgi_params;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header Cache-Control private;
}

# Static resources (html, js, css) used during login and logout
# process.
location /auth {
    auth_request off;
    alias   $wwwhisper_root/www_static/auth/;
    charset utf-8;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header Cache-Control private;
    expires 24h;

    # Returned to the user when he/she is not authorized to access a
    # given location. It does not need to be externally accessible via
    # /auth/not_authorized.html URL.
    location /auth/not_authorized.html {
        internal;
    }

    # Make login and logout pages accessible also without .html suffix.
    location = /auth/login {
      alias $wwwhisper_root/www_static/auth/login.html;
      default_type text/html;
    }
    location = /auth/logout {
      alias $wwwhisper_root/www_static/auth/logout.html;
      default_type text/html;
    }
}

# ===================================================================
# 3. Enables the wwwhisper admin application (accessible via
#    http[s]://site.url/admin/).
# ===================================================================

# Handles admin API calls.
location /admin/api {
    uwsgi_pass $wwwhisper_site_socket;
    uwsgi_modifier1 30;
    include uwsgi_params;
    # This is equivalent of a proxy configuration directive:
    # proxy_set_header User $user.
    uwsgi_param HTTP_USER $user;
}

# Static resources (html, js, css) used by the admin application.
location /admin {
  alias   $wwwhisper_root/www_static/admin/;
  charset utf-8;
  expires 24h;
}


